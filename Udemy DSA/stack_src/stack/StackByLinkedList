package stack;
import linkedList.SingleLinkedList;
import node.SingleNode;

public class StackByLinkedList {
	SingleLinkedList SLL_obj;
	SingleNode head;
	
	
	//constructor
	public StackByLinkedList() {
		SLL_obj = new SingleLinkedList();
		head = null;
	}
	
	//push function
	public void push(int nodeValue) {
		if(SLL_obj.getHead() == null) {
			SLL_obj.createSingleLinkedList(nodeValue);
		}
		else {
			SLL_obj.insertInLinkedList(nodeValue, 0);
		}
		System.out.println("Inserted " + nodeValue + " in Stack !!!");
	}//end of method
	
	
	//peek function
	public int peek() {
		if(!isEmpty())
			return (SLL_obj.getHead().getValue()) ;
		else {
			System.out.println("The stack is empty!!!");
			return -1;
		}
	}//end of method
	
	//isEmpty function
	public boolean isEmpty() {
		if(SLL_obj.getHead()==null)
			return true;
		else
			return false;
	}//end of method
	
	//pop function
	public int pop() {
		int value = -1;
		if(isEmpty()) {
			System.out.println("Stack underflow error!!!");
		}
		else {
			value = SLL_obj.getHead().getValue();
			SLL_obj.deletionOfNode(0);
		}
		return value;
	}
	
	//deletion of entire stack
	public void deleteStack() {
		head = null;
		//tail = null;
	}
	
}
