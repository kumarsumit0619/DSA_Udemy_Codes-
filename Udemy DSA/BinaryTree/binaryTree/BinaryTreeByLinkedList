package binaryTree;
import java.util.*;
import node.BinaryNode;

public class BinaryTreeByLinkedList {
	BinaryNode root;
	
	//constructor for creating a blank BT
	BinaryTreeByLinkedList(){
		this.root=null;
	}
	
	//insert a new node at deepest place in tree
	void insert(int value) {
		BinaryNode node= new BinaryNode();
		node.setValue(value);
		if(root==null) {
			root = node;
			System.out.println("Successfully inserted new node1= "+node.getValue()); 
			return;
		}
		Queue<BinaryNode> queue = new LinkedList<>();
		queue.add(root);
		
		while(!queue.isEmpty()) {
			BinaryNode presentNode = queue.remove();
			
			if(presentNode.getLeft() == null) {
				presentNode.setLeft(node);
				System.out.println("Successfully inserted new node2= "+node.getValue());
				break;
			}
			else if(presentNode.getRight() == null) {
				presentNode.setRight(node);
				System.out.println("Successfully inserted new node3= "+node.getValue());
				break;
			}
			else {
				queue.add(presentNode.getLeft());
				queue.add(presentNode.getRight());
			}//else if ends
		}//while ends
	}//fn ends
	
	//level order traversal of BT
	void levelOrder() {
		//make a queue for level order. Queue is interface and LL is class
		Queue<BinaryNode> queue = new LinkedList<>();
		queue.add(root);
		
		while(!queue.isEmpty()) {
			BinaryNode presentNode = queue.remove();
			System.out.print(presentNode.getValue()+" ");
			if(presentNode.getLeft() != null) {
				queue.add(presentNode.getLeft());
			}
			if(presentNode.getRight() != null) {
				queue.add(presentNode.getRight());
			}
		}//while ends
		System.out.println();
	}//fn ends
	
	//pre-order traversal of BT
	void preOrder(BinaryNode node) {
		if(node == null)
			return;
		System.out.print(node.getValue()+" ");
		preOrder(node.getLeft());
		preOrder(node.getRight());	
	}//fn ends
	
	//in-order traversal of BT
		void inOrder(BinaryNode node) {
			if(node == null)
				return;
			inOrder(node.getLeft());
			System.out.print(node.getValue()+" ");
			inOrder(node.getRight());	
		}//fn ends
		
		//post-order traversal of BT
				void postOrder(BinaryNode node) {
					if(node == null)
						return;
					postOrder(node.getLeft());
					postOrder(node.getRight());	
					System.out.print(node.getValue()+" ");
				}//fn ends
		
		//Search for a given value in the BT
			void search(int value) {
				Queue<BinaryNode> queue = new LinkedList<>();
				queue.add(root);
				
				while(!queue.isEmpty()) {
					BinaryNode presentNode = queue.remove();
					
					if(presentNode.getValue() == value) {
						System.out.println("Value "+value+" is found in BT !");
						return;
					}
					else {
						if(presentNode.getLeft() != null)
								queue.add(presentNode.getLeft());
						if(presentNode.getRight() != null)
								queue.add(presentNode.getRight());
					}
				}// while ends
				System.out.println("Value "+value+" is not found in BT !");
			}//fn ends
		
			
			//Delete node from Binary tree
			void deleteNodeOfBinaryTree(int value) {
				Queue<BinaryNode> queue= new LinkedList<>();
				queue.add(root);
				while(!queue.isEmpty()) {
					BinaryNode presentNode = queue.remove();
					// if node is found then copy deepest node here and delete deepest node.
					if(presentNode.getValue() == value) {
						presentNode.setValue(getDeepestNode().getValue());
						DeleteDeepestNode();
						System.out.println("Deleted the Node !!");
						return;
					}
					else {
						if(presentNode.getLeft() != null)
								queue.add(presentNode.getLeft());
						if(presentNode.getRight() != null)
								queue.add(presentNode.getRight());
					}
				}// while ends
				System.out.println("Did not find the node !!");
			}//fn ends
			
			// get last node of last level of binary tree/ last of the last lBievel i.e., most On R.H.S.
			public BinaryNode getDeepestNode() {
				Queue<BinaryNode> queue = new LinkedList<>();
				queue.add(root);
				BinaryNode presentNode = null;
				while(!queue.isEmpty()) {
					presentNode = queue.remove();
					if(presentNode.getLeft() != null)
						queue.add(presentNode.getLeft());
					if(presentNode.getRight() != null)
						queue.add(presentNode.getRight());
				}
				return presentNode;
			}//fn ends
			
			//Delete Deepest Node
			public void DeleteDeepestNode() {
				Queue<BinaryNode> queue = new LinkedList<>();
				queue.add(root);
				BinaryNode previousNode, presentNode = null;
				while(!queue.isEmpty()) {
					previousNode = presentNode;
					presentNode = queue.remove();
					if(presentNode.getLeft() == null) {
						previousNode.setRight(null);
						return;
					}
					else if(presentNode.getRight() == null) {
						presentNode.setLeft(null);
						return;
					}
					queue.add(presentNode.getLeft());
					queue.add(presentNode.getRight());
				}// while ends
			}//fn ends
		
			//delete entire tree
			void deleteTree() {
				root = null;
				System.out.println("Binary Tree has been deleted Successfully!!!!!!!!!!");
			}	
}
